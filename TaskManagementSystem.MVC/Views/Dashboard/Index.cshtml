@model TaskManagementSystem.MVC.Models.DashboardViewModel
@{
    ViewData["Title"] = "لوحة التقارير";
}

<!-- Header Section -->
<div class="mb-8">
    <div class="flex items-center justify-between">
        <div>
            <h1 class="text-3xl font-bold text-gray-900 mb-2">لوحة التقارير</h1>
            <p class="text-gray-600">نظرة شاملة على أداء المهام والموظفين</p>
        </div>
        <div class="flex items-center space-x-4 space-x-reverse">
            <div class="bg-gradient-to-r from-blue-500 to-purple-600 text-white px-4 py-2 rounded-lg shadow-lg">
                <i class="fas fa-calendar-alt ml-2"></i>
                <span class="font-medium">@DateTime.Now.ToString("yyyy/MM/dd")</span>
            </div>
        </div>
    </div>
</div>

<!-- Statistics Cards -->
<div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8">
    <!-- Total Tasks Card -->
    <div class="bg-gradient-to-br from-blue-500 to-blue-600 rounded-xl shadow-lg p-6 text-white transform hover:scale-105 transition-all duration-300">
        <div class="flex items-center justify-between">
            <div>
                <p class="text-blue-100 text-sm font-medium">إجمالي المهام</p>
                <p class="text-3xl font-bold">@Model.StatusCounts.Sum(s => s.Count)</p>
            </div>
            <div class="bg-white bg-opacity-20 rounded-full p-3">
                <i class="fas fa-tasks text-2xl"></i>
            </div>
        </div>
    </div>

    <!-- Completed Tasks Card -->
    <div class="bg-gradient-to-br from-green-500 to-green-600 rounded-xl shadow-lg p-6 text-white transform hover:scale-105 transition-all duration-300">
        <div class="flex items-center justify-between">
            <div>
                <p class="text-green-100 text-sm font-medium">المهام المكتملة</p>
                <p class="text-3xl font-bold">@(Model.StatusCounts.FirstOrDefault(s => s.Status == "مكتملة")?.Count ?? 0)</p>
            </div>
            <div class="bg-white bg-opacity-20 rounded-full p-3">
                <i class="fas fa-check-circle text-2xl"></i>
            </div>
        </div>
    </div>

    <!-- In Progress Tasks Card -->
    <div class="bg-gradient-to-br from-yellow-500 to-orange-500 rounded-xl shadow-lg p-6 text-white transform hover:scale-105 transition-all duration-300">
        <div class="flex items-center justify-between">
            <div>
                <p class="text-yellow-100 text-sm font-medium">قيد التنفيذ</p>
                <p class="text-3xl font-bold">@(Model.StatusCounts.FirstOrDefault(s => s.Status == "قيد التنفيذ")?.Count ?? 0)</p>
            </div>
            <div class="bg-white bg-opacity-20 rounded-full p-3">
                <i class="fas fa-clock text-2xl"></i>
            </div>
        </div>
    </div>

    <!-- Average Duration Card -->
    <div class="bg-gradient-to-br from-purple-500 to-purple-600 rounded-xl shadow-lg p-6 text-white transform hover:scale-105 transition-all duration-300">
        <div class="flex items-center justify-between">
            <div>
                <p class="text-purple-100 text-sm font-medium">متوسط زمن التنفيذ</p>
                <p class="text-3xl font-bold">@Model.AverageDuration.AverageMinutes.ToString("F1")</p>
                <p class="text-purple-100 text-sm">دقيقة</p>
            </div>
            <div class="bg-white bg-opacity-20 rounded-full p-3">
                <i class="fas fa-stopwatch text-2xl"></i>
            </div>
        </div>
    </div>
</div>

<!-- Main Content Grid -->
<div class="grid grid-cols-1 lg:grid-cols-3 gap-8">
    <!-- Chart Section -->
    <div class="lg:col-span-2">
        <div class="bg-white rounded-xl shadow-lg p-6 hover:shadow-xl transition-shadow duration-300">
            <div class="flex items-center justify-between mb-6">
                <h3 class="text-xl font-bold text-gray-900 flex items-center">
                    <i class="fas fa-chart-bar text-blue-500 ml-3"></i>
                    توزيع المهام حسب الحالة
                </h3>
                <div class="flex space-x-2 space-x-reverse">
                    <button class="bg-blue-100 text-blue-600 px-3 py-1 rounded-lg text-sm font-medium hover:bg-blue-200 transition-colors">
                        <i class="fas fa-download ml-1"></i>
                        تصدير
                    </button>
                </div>
            </div>
            <div class="relative">
                <canvas id="statusChart" class="w-full" style="height: 350px;"></canvas>
            </div>
        </div>
    </div>

    <!-- Quick Stats -->
    <div class="space-y-6">
        <!-- Performance Summary -->
        <div class="bg-white rounded-xl shadow-lg p-6 hover:shadow-xl transition-shadow duration-300">
            <h3 class="text-lg font-bold text-gray-900 mb-4 flex items-center">
                <i class="fas fa-tachometer-alt text-green-500 ml-3"></i>
                ملخص الأداء
            </h3>
            <div class="space-y-4">
                <div class="flex items-center justify-between p-3 bg-green-50 rounded-lg">
                    <span class="text-sm font-medium text-gray-700">معدل الإنجاز</span>
                    <span class="text-lg font-bold text-green-600">
                        @{
                            var totalTasks = Model.StatusCounts.Sum(s => s.Count);
                            var completedTasks = Model.StatusCounts.FirstOrDefault(s => s.Status == "مكتملة")?.Count ?? 0;
                            var completionRate = totalTasks > 0 ? (completedTasks * 100.0 / totalTasks) : 0;
                        }
                        @completionRate.ToString("F1")%
                    </span>
                </div>
                <div class="flex items-center justify-between p-3 bg-blue-50 rounded-lg">
                    <span class="text-sm font-medium text-gray-700">إجمالي الموظفين</span>
                    <span class="text-lg font-bold text-blue-600">@Model.UserPerformances.Count()</span>
                </div>
                <div class="flex items-center justify-between p-3 bg-yellow-50 rounded-lg">
                    <span class="text-sm font-medium text-gray-700">المهام المتأخرة</span>
                    <span class="text-lg font-bold text-yellow-600">@Model.UserPerformances.Sum(u => u.OverdueCount)</span>
                </div>
            </div>
        </div>

        <!-- Top Performer -->
        <div class="bg-white rounded-xl shadow-lg p-6 hover:shadow-xl transition-shadow duration-300">
            <h3 class="text-lg font-bold text-gray-900 mb-4 flex items-center">
                <i class="fas fa-trophy text-yellow-500 ml-3"></i>
                أفضل موظف
            </h3>
            @{
                var topPerformer = Model.UserPerformances.OrderByDescending(u => u.CompletedOnTime).FirstOrDefault();
            }
            @if (topPerformer != null)
            {
                <div class="text-center">
                    <div class="w-16 h-16 bg-gradient-to-br from-yellow-400 to-yellow-500 rounded-full flex items-center justify-center mx-auto mb-3">
                        <i class="fas fa-user text-white text-xl"></i>
                    </div>
                    <h4 class="font-bold text-gray-900">@topPerformer.UserName</h4>
                    <p class="text-sm text-gray-600 mb-2">@topPerformer.CompletedOnTime مهمة مكتملة في الوقت</p>
                    <div class="bg-yellow-100 text-yellow-800 px-3 py-1 rounded-full text-xs font-medium">
                        نجم الشهر
                    </div>
                </div>
            }
        </div>
    </div>
</div>

<!-- Employee Performance Table -->
<div class="mt-8">
    <div class="bg-white rounded-xl shadow-lg overflow-hidden hover:shadow-xl transition-shadow duration-300">
        <div class="bg-gradient-to-r from-gray-50 to-gray-100 px-6 py-4 border-b border-gray-200">
            <h3 class="text-xl font-bold text-gray-900 flex items-center">
                <i class="fas fa-users text-indigo-500 ml-3"></i>
                أداء الموظفين التفصيلي
            </h3>
        </div>
        <div class="overflow-x-auto">
            <table class="min-w-full divide-y divide-gray-200">
                <thead class="bg-gray-50">
                    <tr>
                        <th class="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">
                            <i class="fas fa-user ml-2"></i>الموظف
                        </th>
                        <th class="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">
                            <i class="fas fa-tasks ml-2"></i>إجمالي المهام
                        </th>
                        <th class="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">
                            <i class="fas fa-check-circle ml-2"></i>المنجز في الوقت
                        </th>
                        <th class="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">
                            <i class="fas fa-exclamation-triangle ml-2"></i>المتأخرة
                        </th>
                        <th class="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">
                            <i class="fas fa-chart-line ml-2"></i>معدل الأداء
                        </th>
                    </tr>
                </thead>
                <tbody class="bg-white divide-y divide-gray-200">
                    @foreach (var user in Model.UserPerformances.OrderByDescending(u => u.CompletedOnTime))
                    {
                        <tr class="hover:bg-gray-50 transition-colors duration-200">
                            <td class="px-6 py-4 whitespace-nowrap">
                                <div class="flex items-center">
                                    <div class="w-10 h-10 bg-gradient-to-br from-blue-400 to-blue-500 rounded-full flex items-center justify-center ml-3">
                                        <span class="text-white font-bold text-sm">@user.UserName.Substring(0, 1)</span>
                                    </div>
                                    <div class="text-sm font-medium text-gray-900">@user.UserName</div>
                                </div>
                            </td>
                            <td class="px-6 py-4 whitespace-nowrap">
                                <span class="inline-flex items-center px-3 py-1 rounded-full text-sm font-medium bg-blue-100 text-blue-800">
                                    @user.Total
                                </span>
                            </td>
                            <td class="px-6 py-4 whitespace-nowrap">
                                <span class="inline-flex items-center px-3 py-1 rounded-full text-sm font-medium bg-green-100 text-green-800">
                                    <i class="fas fa-check ml-1"></i>
                                    @user.CompletedOnTime
                                </span>
                            </td>
                            <td class="px-6 py-4 whitespace-nowrap">
                                @if (user.OverdueCount > 0)
                                {
                                    <span class="inline-flex items-center px-3 py-1 rounded-full text-sm font-medium bg-red-100 text-red-800">
                                        <i class="fas fa-exclamation-triangle ml-1"></i>
                                        @user.OverdueCount
                                    </span>
                                }
                                else
                                {
                                    <span class="inline-flex items-center px-3 py-1 rounded-full text-sm font-medium bg-gray-100 text-gray-800">
                                        0
                                    </span>
                                }
                            </td>
                            <td class="px-6 py-4 whitespace-nowrap">
                                @{
                                    var performanceRate = user.Total > 0 ? (user.CompletedOnTime * 100.0 / user.Total) : 0;
                                    var performanceClass = performanceRate >= 80 ? "bg-green-100 text-green-800" : 
                                                          performanceRate >= 60 ? "bg-yellow-100 text-yellow-800" : 
                                                          "bg-red-100 text-red-800";
                                }
                                <div class="flex items-center">
                                    <div class="w-16 bg-gray-200 rounded-full h-2 ml-2">
                                        <div class="bg-gradient-to-r from-green-400 to-green-500 h-2 rounded-full" style="width: @performanceRate%"></div>
                                    </div>
                                    <span class="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium @performanceClass">
                                        @performanceRate.ToString("F1")%
                                    </span>
                                </div>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        // Chart.js configuration with enhanced styling
        const labels = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model.StatusCounts.Select(s => s.Status)));
        const dataVals = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model.StatusCounts.Select(s => s.Count)));

        const ctx = document.getElementById('statusChart').getContext('2d');
        
        // Create gradient backgrounds
        const gradient1 = ctx.createLinearGradient(0, 0, 0, 400);
        gradient1.addColorStop(0, 'rgba(59, 130, 246, 0.8)');
        gradient1.addColorStop(1, 'rgba(59, 130, 246, 0.2)');
        
        const gradient2 = ctx.createLinearGradient(0, 0, 0, 400);
        gradient2.addColorStop(0, 'rgba(16, 185, 129, 0.8)');
        gradient2.addColorStop(1, 'rgba(16, 185, 129, 0.2)');
        
        const gradient3 = ctx.createLinearGradient(0, 0, 0, 400);
        gradient3.addColorStop(0, 'rgba(245, 158, 11, 0.8)');
        gradient3.addColorStop(1, 'rgba(245, 158, 11, 0.2)');
        
        const gradient4 = ctx.createLinearGradient(0, 0, 0, 400);
        gradient4.addColorStop(0, 'rgba(239, 68, 68, 0.8)');
        gradient4.addColorStop(1, 'rgba(239, 68, 68, 0.2)');

        new Chart(ctx, {
            type: 'bar',
            data: {
                labels: labels,
                datasets: [{
                    label: 'عدد المهام',
                    data: dataVals,
                    backgroundColor: [gradient1, gradient2, gradient3, gradient4],
                    borderColor: ['#3B82F6', '#10B981', '#F59E0B', '#EF4444'],
                    borderWidth: 2,
                    borderRadius: 8,
                    borderSkipped: false,
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                plugins: {
                    legend: {
                        display: false
                    },
                    tooltip: {
                        backgroundColor: 'rgba(0, 0, 0, 0.8)',
                        titleColor: 'white',
                        bodyColor: 'white',
                        borderColor: 'rgba(255, 255, 255, 0.2)',
                        borderWidth: 1,
                        cornerRadius: 8,
                        displayColors: false,
                        callbacks: {
                            title: function(context) {
                                return context[0].label;
                            },
                            label: function(context) {
                                return `عدد المهام: ${context.parsed.y}`;
                            }
                        }
                    }
                },
                scales: {
                    y: {
                        beginAtZero: true,
                        grid: {
                            color: 'rgba(0, 0, 0, 0.1)',
                            drawBorder: false
                        },
                        ticks: {
                            color: '#6B7280',
                            font: {
                                family: 'Cairo',
                                size: 12
                            }
                        }
                    },
                    x: {
                        grid: {
                            display: false
                        },
                        ticks: {
                            color: '#6B7280',
                            font: {
                                family: 'Cairo',
                                size: 12
                            }
                        }
                    }
                },
                animation: {
                    duration: 1000,
                    easing: 'easeInOutQuart'
                },
                interaction: {
                    intersect: false,
                    mode: 'index'
                }
            }
        });

        // Add smooth animations on page load
        document.addEventListener('DOMContentLoaded', function() {
            const cards = document.querySelectorAll('.transform');
            cards.forEach((card, index) => {
                setTimeout(() => {
                    card.style.opacity = '0';
                    card.style.transform = 'translateY(20px)';
                    card.style.transition = 'all 0.6s ease';
                    
                    setTimeout(() => {
                        card.style.opacity = '1';
                        card.style.transform = 'translateY(0)';
                    }, 100);
                }, index * 100);
            });
        });
    </script>
}


<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet" />
